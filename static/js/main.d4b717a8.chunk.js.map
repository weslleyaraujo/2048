{"version":3,"sources":["styles.ts","components/Cell.tsx","components/Page.tsx","components/Panel.tsx","components/Winner.tsx","game.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["globalStyles","globalCss","margin","padding","fontFamily","styled","createStitches","theme","space","small","medium","colors","background","backgroundAccent","radii","Cell","motion","div","backgroundColor","fontSize","width","height","fontWeight","borderRadius","display","alignItems","justifyContent","variants","hasValue","true","color","value","defaultVariants","Page","Panel","gridTemplateColumns","gridGap","Wrapper","position","left","top","Alert","minWidth","minHeight","Winner","vertical","move","winnerScore","board","direction","maxScore","nextState","Array","length","map","lines","prev","index","line","items","count","next","includes","push","sum","values","filter","Boolean","current","nextValue","Math","max","boardSize","empty","min","fill","concat","isWinner","randomize","times","hasEmptyValues","some","row","item","added","random","round","DIRECTION","ArrowUp","ArrowDown","ArrowLeft","ArrowRight","App","useState","setState","useEffect","listener","event","Object","keys","key","result","document","body","addEventListener","removeEventListener","flat","initial","scale","animate","transition","String","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d4b717a8.chunk.js","sourcesContent":["import { createStitches, globalCss } from \"@stitches/react\";\n\nexport const globalStyles = globalCss({\n  \"@import\":\n    \"https://fonts.googleapis.com/css2?family=Open+Sans:wght@700&display=swap\",\n  \"html,body,#root\": {\n    margin: 0,\n    padding: 0,\n    fontFamily: '\"Open Sans\", \"Helvetica Neue\", Arial, sans-serifhtml, body',\n  },\n});\n\nexport const { styled } = createStitches({\n  theme: {\n    space: {\n      small: \"4px\",\n      medium: \"6px\",\n    },\n    colors: {\n      background: \"#bbac9f\",\n      backgroundAccent: \"#ccc0b2\",\n    },\n    radii: {\n      small: \"4px\",\n    },\n  },\n});\n","import { motion } from \"framer-motion\";\nimport { styled } from \"../styles\";\n\nexport const Cell = styled(motion.div, {\n  backgroundColor: \"$backgroundAccent\",\n  fontSize: 18,\n  width: 50,\n  height: 50,\n  fontWeight: 700,\n  borderRadius: \"$small\",\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  variants: {\n    hasValue: {\n      true: {\n        backgroundColor: \"#aa60a6\",\n        color: \"#f9f8f6\",\n      },\n    },\n    value: {\n      2: {\n        backgroundColor: \"#eee4da\",\n        color: \"#746b62\",\n      },\n      4: {\n        backgroundColor: \"#eee1c9\",\n        color: \"#776e65\",\n      },\n      8: {\n        backgroundColor: \"#f3b27a\",\n        color: \"#f9f6f2\",\n      },\n      16: {\n        color: \"#f9f6f2\",\n        backgroundColor: \"#f69664\",\n      },\n      32: {\n        color: \"#f9f6f2\",\n        backgroundColor: \"#f77c5f\",\n      },\n      64: {\n        color: \"#f9f6f2\",\n        backgroundColor: \"#f75f3b\",\n      },\n      128: {\n        color: \"#f9f6f2\",\n        backgroundColor: \"#edd073\",\n      },\n      256: {\n        color: \"#f9f6f2\",\n        backgroundColor: \"#edcc62\",\n      },\n      512: {\n        color: \"#f9f6f2\",\n        backgroundColor: \"#edc950\",\n      },\n      1024: {\n        color: \"#f9f6f2\",\n        backgroundColor: \"#edc53f\",\n      },\n      2048: {\n        color: \"#f9f6f2\",\n        backgroundColor: \"#edc22e\",\n      },\n      4096: {\n        backgroundColor: \"#b784ab\",\n      },\n    },\n  },\n  defaultVariants: {\n    value: \"default\",\n  },\n});\n","import { styled } from \"@stitches/react\";\n\nexport const Page = styled(\"div\", {\n  display: \"flex\",\n  width: \"100vw\",\n  height: \"100vh\",\n  justifyContent: \"center\",\n  alignItems: \"center\",\n});\n","import { styled } from \"../styles\";\n\nexport const Panel = styled(\"div\", {\n  display: \"grid\",\n  backgroundColor: \"$background\",\n  gridTemplateColumns: \"1fr 1fr 1fr 1fr\",\n  gridGap: \"$small\",\n  padding: \"$small\",\n  borderRadius: \"$small\",\n});\n","import { styled } from \"../styles\";\n\nconst Wrapper = styled(\"div\", {\n  position: \"fixed\",\n  left: 0,\n  top: 0,\n  backgroundColor: \"rgba(0,0,0,0.5)\",\n  width: \"100%\",\n  height: \"100%\",\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n});\n\nconst Alert = styled(\"div\", {\n  backgroundColor: \"white\",\n  minWidth: \"20vw\",\n  minHeight: \"10vh\",\n  borderRadius: \"$small\",\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n});\n\nexport function Winner() {\n  return (\n    <Wrapper>\n      <Alert>\n        <p>You won!</p>\n      </Alert>\n    </Wrapper>\n  );\n}\n","const vertical = [\"up\", \"down\"];\n\nexport type Board = (number | null)[][];\nexport type Direction = \"up\" | \"right\" | \"down\" | \"left\";\n\nexport function move({\n  winnerScore = 2048,\n  board,\n  direction,\n}: {\n  winnerScore?: number;\n  board: Board;\n  direction: Direction;\n}) {\n  let maxScore = 0;\n  const nextState = [...Array(board.length)].map(() => Array(board.length));\n  const lines = [];\n  const prev = [];\n  for (let index = 0; index < board.length; index++) {\n    let line = [];\n    let items = [];\n    for (let count = 0; count < board.length; count++) {\n      const next = vertical.includes(direction)\n        ? board[count][index]\n        : board[index][count];\n      items.push(next);\n      if (next !== null) {\n        line.push(next);\n      }\n    }\n\n    prev.push(items);\n\n    const sum = [];\n    const values: typeof board[0] = line.filter(Boolean);\n    for (let count = 0; count < values.length; count++) {\n      const current = values[count];\n      const next = values[count + 1];\n      if (current === next && current !== null && next !== null) {\n        const nextValue = current + next;\n        maxScore = Math.max(maxScore, nextValue);\n        sum.push(nextValue);\n        values[count] = null;\n        values[count + 1] = null;\n      } else if (current !== null) {\n        sum.push(current);\n      }\n    }\n\n    const boardSize = board[0].length - 1;\n    const empty = new Array(\n      Math.min(boardSize, boardSize - sum.length) + 1\n    ).fill(null);\n\n    const next = [\"down\", \"right\"].includes(direction)\n      ? empty.concat(sum)\n      : sum.concat(empty);\n\n    lines.push(next);\n    for (let count = 0; count < next.length; count++) {\n      if (vertical.includes(direction)) {\n        nextState[count][index] = next[count];\n        continue;\n      }\n      nextState[index][count] = next[count];\n    }\n  }\n\n  return {\n    lines,\n    prev,\n    board: nextState,\n    isWinner: maxScore >= winnerScore,\n  };\n}\n\nexport function randomize(board: Board, times: number = 1) {\n  const hasEmptyValues = board.some((row) => row.some((item) => item === null));\n  if (!hasEmptyValues) {\n    return board;\n  }\n\n  let added = 0;\n  while (added !== times) {\n    const row = random(board.length);\n    const index = random(board.length);\n    if (board?.[row]?.[index] === null) {\n      board[row][index] = 2;\n      added++;\n    }\n  }\n\n  return board;\n}\n\nconst random = (value: number) => Math.round(Math.random() * value);\n","import React, { useEffect, useState } from \"react\";\nimport { Cell } from \"./components/Cell\";\nimport { Page } from \"./components/Page\";\nimport { Panel } from \"./components/Panel\";\nimport { Winner } from \"./components/Winner\";\nimport { Direction, move, randomize } from \"./game\";\nimport { globalStyles } from \"./styles\";\n\nconst DIRECTION: Record<string, Direction> = {\n  ArrowUp: \"up\",\n  ArrowDown: \"down\",\n  ArrowLeft: \"left\",\n  ArrowRight: \"right\",\n};\n\nfunction App() {\n  globalStyles();\n  const [{ board, isWinner }, setState] = useState<\n    Pick<ReturnType<typeof move>, \"isWinner\" | \"board\">\n  >(() => ({\n    isWinner: false,\n    board: randomize(\n      [\n        [null, null, null, null],\n        [null, null, null, null],\n        [null, null, null, null],\n        [null, null, null, null],\n      ],\n      2\n    ),\n  }));\n\n  useEffect(() => {\n    const listener = async (event: HTMLElementEventMap[\"keydown\"]) => {\n      if (!Object.keys(DIRECTION).includes(event.key)) {\n        return;\n      }\n\n      const result = move({ board, direction: DIRECTION[event.key] });\n      setState({\n        board: randomize(result.board, 1),\n        isWinner: result.isWinner,\n      });\n    };\n\n    document.body.addEventListener(\"keydown\", listener);\n    return () => document.body.removeEventListener(\"keydown\", listener);\n  }, [board]);\n\n  return (\n    <Page>\n      {isWinner ? <Winner /> : null}\n      <Panel>\n        {board.flat(1).map((item, index) => (\n          <Cell\n            key={`${item}-${index}`}\n            hasValue={Boolean(item)}\n            {...(item === 2\n              ? {\n                  initial: { scale: 0 },\n                  animate: { scale: 1 },\n                  transition: {},\n                }\n              : {})}\n            {...(item\n              ? {\n                  value: String(item) as React.ComponentProps<\n                    typeof Cell\n                  >[\"value\"],\n                }\n              : {})}\n          >\n            {item}\n          </Cell>\n        ))}\n      </Panel>\n    </Page>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}